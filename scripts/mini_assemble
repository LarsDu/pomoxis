#!/bin/bash
set -e

usage="$(basename "$0") [-h] -i <fastq>

Assemble fastq/fasta formatted reads and perform POA consensus.

    -h  show this help text.
    -i  fastx input reads (required).
    -q  use qualities as is (default: false).
    -r  reference fasta for reference-guided consensus (instead of de novo assembly)
    -o  output folder (default: assm).
    -p  output file prefix (default: reads).
    -t  number of minimap and racon threads (default: 1).
    -c  trim adapters from reads prior to everything else.
    -e  error correct longest e% of reads prior to assembly."

OUTPUT="assm"
NAME="reads"
THREADS=1
USEQUAL=false
CHOP=false
iflag=false
rflag=false
eflag=false
while getopts ':hi:q:r:o:p:t:ce:' option; do
  case "$option" in
    h  ) echo "$usage" >&2; exit;;
    i  ) iflag=true; INPUT=$OPTARG;;
    q  ) USEQUAL=true;;
    r  ) rflag=true; REF=$OPTARG;;
    o  ) OUTPUT=$OPTARG;;
    p  ) NAME=$OPTARG;;
    t  ) THREADS=$OPTARG;;
    c  ) CHOP=true;;
    e  ) eflag=true; ERRCORR=$OPTARG;;
    \? ) echo "Invalid option: -${OPTARG}." >&2; exit 1;;
    :  ) echo "Option -$OPTARG requires an argument." >&2; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if ! $iflag; then
  echo "$usage" >&2;
  echo "-i must be specified." >&2;
  exit 1;
fi

if [[ ! -e ${OUTPUT} ]]; then
  mkdir -p ${OUTPUT}
else
  echo "Output ${OUTPUT} already exists." >&2; exit 1
fi

# Simple test for fastq
filename=$(basename "$INPUT")
ext="${filename##*.}"
FASTQ=${OUTPUT}/${NAME}.fq
MOCKQ=10
echo "extention is '$ext'"
if [ "$ext" = 'fq' ] || [ "$ext" = 'fastq' ]; then
  if ${USEQUAL}; then
    echo "Copying input to workspace: ${INPUT} > ${FASTQ}"
    cp ${INPUT} ${FASTQ}
  else
    echo "Discarding quality values: ${INPUT} > ${FASTQ}"
    cat ${INPUT} | fast_convert qq --discard_q --mock_q ${MOCKQ} > ${FASTQ}
  fi
else
  echo "Mocking quality values: ${INPUT} > ${FASTQ}"
  cat ${INPUT} | fast_convert aq --mock_q ${MOCKQ} > ${FASTQ}
fi

cd ${OUTPUT}
READS=$(basename "$FASTQ")

if $CHOP; then
  echo "Trimming reads..."
  TRIMMED=${NAME}_trimmed.fq
  porechop -i ${READS} -o ${TRIMMED} --threads ${THREADS} --check_reads 1000
  READS=${TRIMMED}
else
  echo "Skipped adapter trimming."
fi

if $eflag; then
  echo "Extracting longest ${ERRCORR}% of reads..." 
  LONG_READS=long_${READS}
  OTHERS=other_${READS}
  long_fastq ${READS} ${LONG_READS} --longest ${ERRCORR} --others ${OTHERS}

  echo "Correcting long reads"
  LONG_PAF=long_corr.paf
  LONG_READ_CORR=corr_${LONG_READS}
  minimap -Sw5 -L100 -m0 -t${THREADS} ${LONG_READS} ${READS} > ${LONG_PAF}
  racon -M 8 -X -1 -G -4 -E -1 -t ${THREADS} --erc --bq -1 ${READS} ${LONG_PAF} ${LONG_READS} ${LONG_READ_CORR}

  CORR_READS=${NAME}_corrected.fq
  cat ${LONG_READ_CORR} | fast_convert aq --mock_q ${MOCKQ} | cat - ${OTHERS} > ${CORR_READS}
  READS=${CORR_READS}
else
  echo "Skipped pre-assembly correction." 
fi


if ! $rflag; then 
  ASMOPTS="-s 100 -e 3"
  echo "Overlapping reads..."
  minimap -Sw5 -L100 -m0 -t${THREADS} ${READS} ${READS}| gzip -1 > ${NAME}.paf.gz
  echo "Assembling graph..."
  miniasm ${ASMOPTS} -f ${READS} ${NAME}.paf.gz | tee ${NAME}.gfa | awk '/^S/{print ">"$2"\n"$3}' > ${NAME}.gfa.fasta
  DRAFT=${NAME}.gfa.fasta
else
  echo "Using supplied reference to perform reference-guided consensus..."
  DRAFT=${REF}
fi


for ROUND in {01..04}; do
     echo "Running round ${ROUND} consensus"
     READS2TIGS=reads2contigs_${ROUND}.paf
     NEWDRAFT=racon_${ROUND}.fasta
     minimap ${DRAFT} ${READS} > ${READS2TIGS}
     racon -M 8 -X -1 -G -4 -E -1 -t ${THREADS} --bq -1  ${READS} ${READS2TIGS} ${DRAFT} ${NEWDRAFT}
     DRAFT=${NEWDRAFT}
done;

FINAL=${NAME}_final.fa
sed 's/Consensus_Consensus_Consensus_//' ${DRAFT} > ${FINAL}
echo "Final assembly written to ${OUTPUT}/${FINAL}. Have a nice day."
